//import "th.um"

type (
  Path* = struct {
    sector, property: str
  }
)

const (
  flagDebugOverlays* = Path{"dbg", "overlays"}
)

var (
  configData: map[str]interface{} 
  //lastTimeGot: int
)

/*
fn reloadSession() {

  if ok, file := d_util.readFileStr("session.toml"); ok {
    result := toml.parse(file)
    if error := result.getError(); error != null {
      printf("TOML ERROR: %s\n", toml.formatError(error, file))
    } else {
      configData = result.data
    }
  }
  
}

fn probeSessionUpdate(): bool {
  shouldRedo := lastTimeGot == 0 || th.time - lastTimeGot > 1000
  if shouldRedo {
    lastTimeGot = th.time
  }
  return shouldRedo
}
*/

fn getTree*(): map[str]interface{} {
  return configData
}

fn getProperty*(key: str): interface{} {
  return null
  /*
  if probeSessionUpdate() { reloadSession() }

  tree := getTree()
  if !validkey(tree, key) {
    return null
  }

  return tree[key]
  */
}

fn checkFlag*(path: Path): bool {
  return false
  /*
  if mapValue := ^map[str]interface{}(getProperty(path.sector)); mapValue != null {
    if boolValue := ^bool(mapValue[path.property]); boolValue != null {
      return boolValue^
    }
  }

  return false
  */
}

