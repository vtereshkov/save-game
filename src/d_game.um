import ("th.um"; "rect.um"; "canvas.um"; "input.um"; "image.um"
  "misc/mstrings.um"; "mdbg.um";
  th_color = "color.um";
  "d_rerp.um"; "d_background.um"; "d_resources.um"; "d_config.um"
  "d_util.um"; "d_world.um"; "d_dialogs.um"; "d_global.um"; "d_worlddata.um")

const (
  shapeBlock          = 0
  shapeLeftUpSlope    = 1
  shapeRightUpSlope   = 2
  shapeLeftDownSlope  = 3
  shapeRightDownSlope = 4
)

type (
  Shape* = struct {
    rect: rect.Rect
    shape: int
  }

  Tag* = struct {
    isSet: bool
    param: str
  }

  TagSet* = struct {
    tags: map[str]Tag
  }

  Character* = struct {
    id: str
    tags: TagSet
    rect: rect.Rect
    vel: th.Vf2
    onGround: bool
    onSlope: bool
    invertGravity: bool
  }

  SaveState* = struct {
    playerPos: th.Vf2
  }
)

fn (t: ^TagSet) set*(tag: str) {
  params := mstrings.splitBy(tag, ':')
  if len(params) > 1 {
    t.tags[params[0]].param = params[1]
  }
  t.tags[params[0]].isSet = true
}

fn (t: ^TagSet) param*(tag: str): str {
  return t.tags[tag].param
}

fn (t: ^TagSet) isSet*(tag: str): bool {
  return validkey(t.tags, tag) && t.tags[tag].isSet
} 

fn initTagSetFromString*(s: str): TagSet {
  tagSet := TagSet{map[str]Tag{}}
  tags := mstrings.splitBy(s, ';')
  for i, tag in tags {
    tagSet.set(tag)
  }

  return tagSet
}

var (
  // Resources:
  chumDir: int
  chumRotTime: real
  chumWalkTime: real
  imgObj: image.Image
  imgChum: image.Image

  power, newPower: real
  levers: map[str]bool
  saveState: SaveState
  saved: bool
  won: bool

  lockInput*: bool
  guides: []rect.Rect
  entities*: []Character
  sceneId*: int
  world*: d_world.World
  chara*: Character
  dialogs*: d_dialogs.Dialogs
  camera*: th.Vf2
  cameraScale*: real
  holdingEnt: ^Character
)

fn getCameraRect(): rect.Rect {
  return rect.mk(chara.rect.x+chara.rect.w/2-d_global.screen.w/2, chara.rect.y+chara.rect.h/2-d_global.screen.h/2, d_global.screen.w, d_global.screen.h)
}

fn findGuideInPoint(p: th.Vf2): rect.Rect {
  for i, guide in guides {
    if d_util.rectVsPoint(guide, p) {
      return guide
    }
  }

  return getCameraRect()
}

fn getCameraTargetRect(): rect.Rect {
  guide := findGuideInPoint(chara.rect.getPos())
  cameraRect := getCameraRect()
  scale := d_util.min(guide.w/cameraRect.w, guide.h/cameraRect.h)
  cameraRect.w *= scale
  cameraRect.h *= scale
  // put at center
  cameraRect.x = chara.rect.x+chara.rect.w/2-cameraRect.w/2
  cameraRect.y = chara.rect.y+chara.rect.h/2-cameraRect.h/2


  return d_util.rectKeepInBounds(cameraRect, guide)
}

type CameraProperties = struct {
  pos: th.Vf2
  scale: real
}

fn getCameraProperties*(): CameraProperties {
  targetRect := getCameraTargetRect()
  return CameraProperties{targetRect.getPos(), d_util.min(d_global.screen.w/targetRect.w, d_global.screen.h/targetRect.h)}
}

fn cameraControl() {
  props := getCameraProperties()

  camera = d_rerp.iVf2(camera, props.pos, th.delta/100.0)
  cameraScale = d_rerp.iReal(cameraScale, props.scale, th.delta/100.0)
}

fn cameraOffsetRect(r: rect.Rect): rect.Rect {
  r.x -= camera.x
  r.y -= camera.y
  r.x *= cameraScale
  r.y *= cameraScale
  r.w *= cameraScale
  r.h *= cameraScale
  return r
}

fn playerControl() {
  sign := 1.0
  if chara.invertGravity {
    sign = -1.0
  }
  if input.isPressed(input.key_up) && chara.onGround {
    chara.vel.y = -2.56*sign
  }
  if input.isPressed(input.key_left) {
    chumDir = 0
    chumWalkTime += th.delta/1000.0
    chara.vel.x = -2
  }
  if input.isPressed(input.key_right) {
    chumDir = 1
    chumWalkTime += th.delta/1000.0
    chara.vel.x = 2
  } 
  if !input.isPressed(input.key_left) && !input.isPressed(input.key_right) {
    chumWalkTime = 0
  }

  if chara.rect.y > 2e3 {
    // NOTE: Respawn
    chara.vel.x = 0
    chara.vel.y = 0
    chara.rect.x = world.playerSpawnPos.x * world.tileset.tileSizeX
    chara.rect.y = world.playerSpawnPos.y * world.tileset.tileSizeY
  }
}

fn entPhysics(ent: ^Character) {
  gravity := 0.0
  if ent.onSlope {
    gravity = 0.1*th.delta/1000.0*60.0
  } else {
    gravity = 0.1*th.delta/1000.0*60.0
  }

  sign := 1.0
  if ent.invertGravity {
    sign = -1.0
  }

  ent.vel.y += gravity*sign

  if ent.invertGravity {
    if ent.vel.y < -10 {
      ent.vel.y = -10
    }
  } else {
    if ent.vel.y > 10 {
      ent.vel.y = 10
    }
  }

  ent.rect.x += ent.vel.x*th.delta/1000.0*60.0
  ent.rect.y += ent.vel.y*th.delta/1000.0*60.0

  ent.onGround = false
  ent.onSlope = false
  ent.vel.x = 0
}

fn collCalcRectSnap(r, along: rect.Rect): th.Vf2 {
  x_left := r.x + r.w - along.x
  y_up := r.y + r.h - along.y

  x_right := along.x + along.w - r.x
  y_down := along.y + along.h - r.y

  var (min_x: real; min_y: real)

  if fabs(x_left) < fabs(x_right) {
    min_x = -x_left
  } else {
    min_x = x_right
  }

  if fabs(y_up) < fabs(y_down) {
    min_y = -y_up
  } else {
    min_y = y_down
  }

  if fabs(min_x) < fabs(min_y) {
    return th.Vf2{min_x, 0}
  } 
  return th.Vf2{0, min_y}
}

fn collSortShapesByProximity(shapes: ^[]Shape, along: th.Vf2) {
  for i := 0; i < len(shapes^); i++ {
    closest := &shapes[i]
    mindist := real(99999999)
    for j := i; j < len(shapes^); j++ {
      current := shapes[j].rect
      point := th.Vf2{current.x + current.w / 2, current.y + current.h / 2}
      dist := point.distanceTo(along)
      if dist < mindist {
        mindist = dist
        closest = &shapes[j]
      }
    }
    tmp := closest^
    closest^ = shapes[i]
    shapes[i] = tmp
  }
}

fn entVsShape(ent: ^Character, s: Shape) {
  r := s.rect
  snap := collCalcRectSnap(ent.rect, r)

  // Not a valid collision (probably pushed back by other blocks?)
  if d_util.rectVsRect(ent.rect, r) == false {
    return
  }
  
  switch s.shape {
  case shapeLeftUpSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x;
    cornerY := ent.rect.y + ent.rect.h - r.y;
    hitY := r.h - ((r.h/r.w) * (cornerX))
    
    if cornerX >= -2 && cornerX <= r.w + 2 && cornerY >= -2 && cornerY <= r.h + 2 && cornerY >= hitY {
      ent.vel.y = 0;
      if !ent.invertGravity {
        ent.onGround = true;
        ent.onSlope = true;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeRightUpSlope:
    cornerX := ent.rect.x - r.x;
    cornerY := ent.rect.y + ent.rect.h - r.y;
    hitY := (r.h/r.w) * (cornerX)

    if cornerX >= -2 && cornerX <= r.w + 2 && cornerY >= -2 && cornerY <= r.h + 2 && cornerY >= hitY {
      ent.vel.y = 0;
      if !ent.invertGravity {
        ent.onGround = true;
        ent.onSlope = true;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeLeftDownSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x;
    cornerY := ent.rect.y - r.y;
    hitY := (r.h/r.w) * (cornerX)

    if cornerX >= -2 && cornerX <= r.w + 2 && cornerY >= -2 && cornerY <= r.h + 2 && cornerY <= hitY {
      if ent.invertGravity {
        ent.onGround = true;
        ent.onSlope = true;
      }
      if ent.vel.y < 0 {
        ent.vel.y = 0;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeRightDownSlope:
    cornerX := ent.rect.x - r.x;
    cornerY := ent.rect.y - r.y;
    hitY := r.h - ((r.h/r.w) * (cornerX))

    if cornerX >= -2 && cornerX <= r.w + 2 && cornerY >= -2 && cornerY <= r.h + 2 && cornerY <= hitY {
      if ent.invertGravity {
        ent.onGround = true;
        ent.onSlope = true;
      }
      if ent.vel.y < 0 {
        ent.vel.y = 0;
      }
      ent.rect.y += hitY-cornerY;
    }
  case shapeBlock:
    if snap.x != 0 {
      ent.vel.x = 0
    } else if (snap.y > 0 && ent.vel.y < 0) || (snap.y < 0 && ent.vel.y > 0) {
      ent.vel.y = 0
    }

    groundCond := [2]bool{snap.y < 0, snap.y > 0}

    if groundCond[int(ent.invertGravity)] {
      ent.onGround = true
    }

    ent.rect.x += snap.x
    ent.rect.y += snap.y
  }
}

fn entConstructColidingSolids(ent: ^Character): []Shape {
  tangents := world.getTangentTiles(rect.Rect{ent.rect.x-1, ent.rect.y-1, ent.rect.w+1, ent.rect.h+1})
  solids := []Shape{}
  nonBlockSolids := []Shape{}

  for i, tangent in tangents {
    shapeRect := rect.Rect{tangent.x*world.tileset.tileSizeX, tangent.y*world.tileset.tileSizeY, world.tileset.tileSizeX, world.tileset.tileSizeY} 
    shapeType := -1

    switch tangent.id {
      // slab
      case 25: shapeType = shapeBlock
        shapeRect.y += world.tileset.tileSizeY/2
        shapeRect.h /= 2
      case 1, 5, 7:   shapeType = shapeBlock
      case 9:   shapeType = shapeLeftUpSlope
      case 10:  shapeType = shapeRightUpSlope
      case 13:  shapeType = shapeLeftDownSlope
      case 14:  shapeType = shapeRightDownSlope
      case 15:  shapeType = shapeLeftUpSlope
          shapeRect.h /= 2;
      case 16:  shapeType = shapeRightUpSlope
          shapeRect.h /= 2;
      case 4:   shapeType = shapeLeftUpSlope
          shapeRect.y += world.tileset.tileSizeY/2;
          shapeRect.h /= 2;
      case 8:   shapeType = shapeRightUpSlope
          shapeRect.y += world.tileset.tileSizeY/2;
          shapeRect.h /= 2;
      case 11:  shapeType = shapeRightDownSlope
          shapeRect.h /= 2;
      case 12:  shapeType = shapeLeftDownSlope
          shapeRect.h /= 2;
      // TODO: Investigate why uncommenting this causes a bug where you can pass through blocks
      // default:  break
    }
    
    if shapeType == shapeBlock {
      solids = append(solids, Shape{shapeRect, shapeType})
    } else {
      nonBlockSolids = append(nonBlockSolids, Shape{shapeRect, shapeType})
    }
  }


  //collSortShapesByProximity(&nonBlockSolids, th.Vf2{ent.rect.x+ent.rect.w/2, ent.rect.y+ent.rect.h/2})
  solids = append(solids, nonBlockSolids)
  collSortShapesByProximity(&solids, th.Vf2{ent.rect.x+ent.rect.w/2, ent.rect.y+ent.rect.h/2})
  return solids
}

fn entSolveCollision(ent: ^Character) {
  solids := entConstructColidingSolids(ent)

  for i, solid in solids {
    entVsShape(ent, solid)
  }
}

fn _drawRectTangents(r: rect.Rect) {
  solids := entConstructColidingSolids(&chara)

  for i, solid in solids {
    rec := cameraOffsetRect(solid.rect)
    switch solid.shape {
    case shapeBlock:
      canvas.drawRect(0x00FF0055, rec)
    case shapeLeftUpSlope, shapeRightDownSlope:
      canvas.drawLine(0x00FF0055, th.Vf2{rec.x, rec.y+rec.h}, th.Vf2{rec.x+rec.w, rec.y}, 2)
    case shapeRightUpSlope, shapeLeftDownSlope:
      canvas.drawLine(0x00FF0055, th.Vf2{rec.x, rec.y}, th.Vf2{rec.x+rec.w, rec.y+rec.h}, 2)
    }
    canvas.drawText(repr(i), th.Vf2{rec.x, rec.y}, th.white, 1)
  }
}

fn convertEntityDescToCharacter(ent: d_worlddata.EntityDesc): Character {
  return Character{id: ent.id, tags: initTagSetFromString(ent.tags), rect: ent.rect}
}

fn findEntity*(id: str): ^Character {
  for i in entities {
    if entities[i].id == id {
      return &entities[i]
    }
  }

  return null
}

fn stateLoad() {
  if saved {
    prevchar := chara

    chara.rect.x = saveState.playerPos.x
    chara.rect.y = saveState.playerPos.y-chara.rect.h

    chara.vel.y *= 0.75
    
    entSolveCollision(&chara)
    if d_util.abs(chara.rect.x-saveState.playerPos.x) > 2 || d_util.abs(chara.rect.y-(saveState.playerPos.y-chara.rect.h)) > 2 {
      chara = prevchar
    }
  }
}

fn stateSave() {
  saved = true
  posSave := chara.rect.getPos()
  posSave.y += chara.rect.h
  saveState = SaveState{posSave}
}

fn start*(worldData: d_worlddata.WorldData) {
  lockInput = false
  levers = map[str]bool{}

  world =  worldData.world

  chara = Character{id: ">>player", tags: initTagSetFromString("Player"), rect: rect.Rect{world.playerSpawnPos.x*world.tileset.tileSizeX, world.playerSpawnPos.y*world.tileset.tileSizeY, world.tileset.tileSizeX/1.2, world.tileset.tileSizeY}}
  chumRotTime = 0
  chumWalkTime = 0
  chumDir = 0

  entities = make([]Character, 0)
  guides = make([]rect.Rect, 0)
  levers = map[str]bool{}

  for i, ent in worldData.entities {
    chr := convertEntityDescToCharacter(ent)
    if chr.tags.isSet("Comment") {
      continue;
    }
    if chr.tags.isSet("Guide") {
      guides = append(guides, chr.rect)
    } else {
      entities = append(entities, chr)
    }
  }

  camera = getCameraProperties().pos
  cameraScale = getCameraProperties().scale
  holdingEnt = null
  saved = false
}

fn init*(rl: ^d_resources.ResourceLoader) {
  imgObj = d_resources.loadImage(rl, "data/img/obj_interactive.png")
  imgObj.setfilter(0)
  imgChum = d_resources.loadImage(rl, "data/img/chr_chum.png")
  imgChum.setfilter(0)
  dialogs = d_dialogs.init()

  // TODO: Maybe for registering dialogs I should have a "DialogEntry" struct that I can load via resource loader directly? This is jank!
  dialogs.register("receptionist", 
    d_resources.loadImage(rl, "data/img/dialog_frames.png"), 0, 
    d_resources.loadImage(rl, "data/img/dlg_receptionist.png"), 0,
    d_resources.loadFont(rl, "data/font/monospace.ttf", 16, 0), 0xFFFFFFFF, 0.1, []str{"smirk"})
}

type EntityInteractPriority = struct {
  entity: ^Character
}

fn (eip: ^EntityInteractPriority) try(entity: ^Character) {
  if eip.entity == null {
    eip.entity = entity
  } else if !entity.tags.isSet("tele") { // NOTE: teleport takes least priority
    eip.entity = entity
  }
}

fn getCollidingEntities(against: ^Character): []^Character {
  collided := []^Character{}
  if d_util.rectVsRect(chara.rect, against.rect) {
    collided = append(collided, &chara)
  }

  for i in entities {
    // Prevent self collision
    ent := &entities[i]
    if ent == against {
      continue
    }
    if d_util.rectVsRect(ent.rect, against.rect) {
      collided = append(collided, ent)
    }
  }
  return collided
}

fn updateEntities() {
  entPhysics(&chara)
  entSolveCollision(&chara)

  interaction := EntityInteractPriority{}

  for i := 0; i < len(entities); i++ {
    ent := &entities[i]
    if ent == holdingEnt {
      continue
    }

    vagueCollision := d_util.rectVsRect(d_util.rectShrink(ent.rect, -5), chara.rect)

    if input.isJustPressed(' ') && vagueCollision {
      interaction.try(ent)
    }

    if ent.tags.isSet("obj_gravityswitch") {
      collisions := getCollidingEntities(ent)
      for i, collision in collisions {
        // to prevent further collisions firing, this is not really how
        // it's supposed to work in the end, so this is merely a hack
        entShape := Shape{rect: ent.rect}
        entVsShape(collision, entShape)
        collision.onGround = false

        collision.invertGravity = !collision.invertGravity
      }
    }

    if ent.tags.isSet("obj_box") {
      boulderTargetRect := d_util.rectMove(ent.rect, th.Vf2{0, -ent.rect.h*power})
      ent.rect = d_rerp.iRect(ent.rect, boulderTargetRect, th.delta/100.0)

      // Resolve player collision
      entShape := Shape{rect: ent.rect}
      entVsShape(&chara, entShape)
      entPhysics(ent)
      entSolveCollision(ent)
    }
  }

  if ent := interaction.entity; ent != null {
    if ent.tags.isSet("obj_box") {
      input.clear(' ')
      if chara.onGround && holdingEnt == null {
        chara.rect.y -= 64
        chara.rect.h += 64
        holdingEnt = ent
      }
    }

    if ent.tags.isSet("tele") {
      if holdingEnt == null {
        input.clear(' ')
        saved = false
        dest := ent.tags.param("tele")
        mdbg.logt(dest)
        if dest == "lv4_start" {
          won = true
          return
        }
        ent := findEntity(dest)
        if ent != null {
          chara.rect.x = ent.rect.x
          chara.rect.y = ent.rect.y
        } else {
          mdbg.logt("Error: Destination entity doesn't exist")
        }
      }
    }

  }
}

const (
  cropBox = rect.Rect{128, 64, 64, 64}
  cropLeverOn = rect.Rect{64, 64, 64, 64}
  cropLeverOff = rect.Rect{64, 0, 64, 64}
  cropDiskette = rect.Rect{128, 0, 64, 64}
  cropTele = rect.Rect{128+64, 0, 64, 64}
)

fn drawImageRect(img: image.Image, src: rect.Rect, dst: rect.Rect, rot: real = 0) {
  d_util.imageCropRect(img, src)

  pos := dst.getPos()
  scale := dst.getDims().div(src.getDims())
  img.draw(th.Transform{p: pos, s: scale, r: rot, o: th.Vf2{dst.w/2, dst.h/2}})
}

fn drawEntityCustomRect(ent: ^Character, r: rect.Rect) {
  destRect := d_util.rectShrink(cameraOffsetRect(r), -2*cameraScale)

  if ent.tags.isSet("Lever") {
    if levers[ent.id] {
      drawImageRect(imgObj, cropLeverOn, destRect)
    } else {
      drawImageRect(imgObj, cropLeverOff, destRect)
    }
  } else if ent.tags.isSet("tele") {
    drawImageRect(imgObj, cropTele, destRect)
  } else if ent.tags.isSet("obj_box") {
    drawImageRect(imgObj, cropBox, destRect)
  } else {
    color := th.blue
    if ent.onGround {
      color = th.red
    }

    if levers[ent.id] {
      color = th.green 
    }

    canvas.drawRect(color, cameraOffsetRect(ent.rect))
  }
}

fn drawEntity(ent: ^Character) {
  drawEntityCustomRect(ent, ent.rect)
}

const (
  chumStateStand = 0
  chumStateJump = 1
  chumStateFall = 2
  //chumStateWalk = 3
  //chumStateWalk2 = 4
  chumFaceRect = rect.Rect{0, 0, 94, 107}
)

fn drawChum(state: int) {
  r := chara.rect
  if holdingEnt != null {
    r.y += 64
    r.h -= 64
  }
  bodyRect := rect.mk(chumFaceRect.x+chumFaceRect.w*(state+1), chumFaceRect.y, chumFaceRect.w, chumFaceRect.h)
  chumDestRect := cameraOffsetRect(rect.mk(r.x-10, r.y-20, chumFaceRect.w/2, chumFaceRect.h/2))
  if chara.invertGravity {
    // Mirror
    chumDestRect.y += chumDestRect.h*1.33 // FIXME: bad
    chumDestRect.h *= -1
  }
  if chumDir == 0 {
    // Mirror.
    chumDestRect.x += chumDestRect.w;
    chumDestRect.w *= -1;
  }
  drawImageRect(imgChum, bodyRect, chumDestRect, chumRotTime)
  drawImageRect(imgChum, chumFaceRect, chumDestRect, chumRotTime)
  if d_config.checkFlag(d_config.flagDebugOverlays) {
    canvas.drawText(sprintf("%d %d", trunc(r.x/32), trunc(r.y/32)), chumDestRect.getPos(), th.red, 1)
  }
}

fn drawEntities() {
  for i in entities {
    if &entities[i] == holdingEnt {
      continue
    }

    drawEntity(&entities[i])
  }

  //drawEntity(&chara)
  sign := 1.0
  if chara.invertGravity {
    sign *= -1
  }
  if sign*chara.vel.y > 0 {
    if sign*chara.vel.y > 3 {
      chumRotTime += th.delta/10.0
    }
    drawChum(chumStateFall)
  } else if !chara.onGround {
    chumRotTime = 0
    drawChum(chumStateJump)
  } else if chumWalkTime == 0.0 {
    chumRotTime = 0;
    drawChum(chumStateStand)
  } else {
    chumRotTime = 0
    switch trunc(chumWalkTime*8.0) % 3 {
      case 0: drawChum(chumStateJump)
      case 1: drawChum(chumStateStand)
      case 2: drawChum(chumStateJump)
    }
  }

  if holdingEnt != null {
    holdingEnt.rect.x = chara.rect.x
    holdingEnt.rect.y = chara.rect.y
    drawEntity(holdingEnt)
  }
}

fn drawEntityDebugRects() {
  for i, entity in entities {
    canvas.drawRect(th_color.alpha(th.blue, 0.4), cameraOffsetRect(entity.rect)) 
  }
  canvas.drawRect(th_color.alpha(th.blue, 0.4), cameraOffsetRect(chara.rect)) 
}

fn update*() {
  // UPDATE PLAYER & CAMERA //
  updateEntities()
  cameraControl()

  if won {
    exit()
  }

  power = newPower
  newPower = 0

  if !lockInput {
    if ok, _ := dialogs.getTopPos(); !ok {
      playerControl()
    }
    
    // Load state
    if input.isJustPressed('a') {
      stateLoad()
    }

    // Save state
    if input.isJustPressed('s') {
      stateSave()
    }

    // unload ent
    if input.isJustPressed(' ') && holdingEnt != null && chara.onGround {
      chara.rect.y += 64
      chara.rect.h -= 64
      holdingEnt.rect.x = chara.rect.x
      holdingEnt.rect.y = chara.rect.y
      chara.rect.y -= 32
      holdingEnt = null
    }

    // UPDATE DIALOG //
    dialogs.advance(input.isPressed('x'))
  }
  dialogs.update()
}

fn drawGuideRects() {
  for i, guide in guides {
    d_util.drawRectLines(th.yellow, cameraOffsetRect(guide))
  }
}

fn drawSavePos() {
  if saved {
    drawImageRect(imgObj, cropDiskette, cameraOffsetRect(rect.mk(saveState.playerPos.x, saveState.playerPos.y-32, 32, 32)))
  }
}

showDebug := false

fn draw*() {
  // RENDER BG //
  bgCam := rect.mk(camera.x, camera.y, d_global.screen.w/cameraScale, d_global.screen.h/cameraScale)
  bgCam.x /= 2
  bgCam.y /= 2
  d_background.draw(bgCam)

  // RENDER WORLD //
  world.drawLayer(camera.mulf(-cameraScale), -1, cameraScale)
  world.drawLayer(camera.mulf(-cameraScale), 0, cameraScale)
  drawEntities()
  world.drawLayer(camera.mulf(-cameraScale), 1, cameraScale)
  drawSavePos()

  // RENDER DIALOG //
  dialogs.draw(cameraOffsetRect(rect.mk(0, 0, 0, 0)).getPos(), cameraScale)

  // DEBUG OVERYALS //

  //if d_config.checkFlag(d_config.flagDebugOverlays) {
  if input.isPressed(input.key_alt) && input.isJustPressed('d') {
    showDebug = !showDebug
  }

  if showDebug {
    _drawRectTangents(chara.rect)
    drawGuideRects()
    d_util.drawRectLines(th.green, cameraOffsetRect(getCameraTargetRect()))
    drawEntityDebugRects()
  }
}
